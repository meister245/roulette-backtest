#!/usr/bin/env python3

import sys
import argparse
from os.path import dirname, realpath

SRC_DIR = realpath(dirname(__file__) + '/../')
sys.path.append(SRC_DIR)

from app.config import Config
from app.controller.service import ServiceController

parser = argparse.ArgumentParser()

parser.add_argument('-b', '--bet', action='append', nargs='+', required=True,
                    metavar='BET', help='betting configuration')
parser.add_argument('-m', '--mode', choices=['single', 'aggregate', 'live'], default='single',
                    metavar='MODE', help='single or aggregate simulation')
parser.add_argument('-c', '--cycles', action='store', type=int, default=None,
                    metavar='NUMBER', help='number of games played')
parser.add_argument('-t', '--target_profit', action='store', type=float, default=None,
                    metavar='NUMBER', help='filename for backtesting strate')
parser.add_argument('-l', '--table_limit', action='store', type=float, default=150.0,
                    metavar='NUMBER', help='maximum sum of bet money table accepts')
parser.add_argument('--balance', action='store', type=float, default=1000.0,
                    metavar='NUMBER', help='starting balance')
parser.add_argument('--backtest', action='store', type=str, default=None,
                    metavar='FILENAME', help='filename for backtesting strategy')

params = vars(parser.parse_args())

if params['mode'] != 'single' and params['backtest'] is not None:
    exit('backtesting is only available is SINGLE game mode')

config = Config(SRC_DIR)
service = ServiceController(config)

if __name__ == '__main__':
    try:
        bets = []
        temp = params.pop('bet')

        for x in temp:
            bets.extend(x)

        service.run_simulation(bets, **params)

    except KeyboardInterrupt:
        exit('process terminated by user')
