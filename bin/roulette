#!/usr/bin/env python3

import sys
import argparse
from os.path import dirname, realpath

SRC_DIR = realpath(dirname(__file__) + '/../')
sys.path.append(SRC_DIR)

from app.config import Config
from app.controller.service import ServiceController

parser = argparse.ArgumentParser()

parser.add_argument('--strategy', action='store', type=str, required=True,
                    help='bet strategy')
parser.add_argument('--mode', choices=['single', 'aggregate'], default='single',
                    metavar='MODE', help='single or aggregate simulation')
parser.add_argument('--bet_type', action='store', type=str, default=None,
                    metavar='NAME', help='bet types')
parser.add_argument('--bet_amount', action='store', type=str, default=None,
                    metavar='NUMBER', help='money to bet on bet types')
parser.add_argument('--balance', action='store', type=float, default=1000.0,
                    metavar='NUMBER', help='starting balance')
parser.add_argument('--cycles', action='store', type=int, default=None,
                    metavar='NUMBER', help='number of games played')
parser.add_argument('--target_profit', action='store', type=float, default=None,
                    metavar='NUMBER', help='filename for backtesting strate')
parser.add_argument('--table_limit', action='store', type=float, default=150.0,
                    metavar='NUMBER', help='maximum sum of bet money table accepts')
parser.add_argument('--idle_start', action='store', type=int, default=0,
                    metavar='NUMBER', help='start playing after N losing cycles')
parser.add_argument('--idle_lose', action='store', type=int, default=0,
                    metavar='NUMBER', help='only play after every N losing cycles')
parser.add_argument('--idle_win', action='store', type=int, default=0,
                    metavar='NUMBER', help='revert back to idling after N consecutive wins')
parser.add_argument('--backtest', action='store', type=str, default=None,
                    metavar='FILENAME', help='filename for backtesting strategy')

params = vars(parser.parse_args())

if params['mode'] != 'single' and params['backtest'] is not None:
    exit('backtesting is only available is SINGLE game mode')

config = Config(SRC_DIR)
service = ServiceController(config)


def parse_bet(bet_type, bet_amount):
    if bet_type is None and bet_amount is None:
        return None

    elif bet_type is None and isinstance(bet_amount, str):
        bet_amount = [float(x) for x in bet_amount.split(',')]
        return bet_amount.pop()

    elif isinstance(bet_type, str) and isinstance(bet_amount, str):
        bet_types = [str(x) for x in bet_type.split(',')]
        bet_amount = [float(x) for x in bet_amount.split(',')]

        if len(bet_types) != len(bet_amount):
            exit('mismatching bet type - bet amount')

        return {bet_types[x]: bet_amount[x] for x in range(len(bet_types))}

    else:
        exit('invalid params - {} - {}'.format(bet_type, bet_amount))


if __name__ == '__main__':
    try:
        bets = parse_bet(params.pop('bet_type'), params.pop('bet_amount'))
        service.run_strategy_test(bets, **params)

    except KeyboardInterrupt:
        exit('process terminated by user')
